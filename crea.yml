---
- hosts: host_terraform
  name: configuration play
  become: true
  gather_facts: true
  vars_files:
    - comunes.yml

  user: "{{ ami_user }}"
  tasks:
    - name: just ping
      ping:


#    - name: install epel repo
#      yum:
#        name: http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
#        state: present
#    - name: install remi repo
#      yum:
#        name: http://rpms.remirepo.net/enterprise/remi-release-7.rpm
#        state: present

#    - name: install power tools
#      package:
#        name: "{{ item }}"
#        state: present
#      with_items:
#        - createrepo
#        - wget
#        - htop
#        - tmux
#        - sysstat
#        - tcpdump
#        - dstat
#        - lsof
#        - iperf
#        - iftop
#        - mtr
#        - net-tools
#        - glances
#        - python-pip
#        - httrack
#        - tree
#        - git


#    - name: crear repo
#      command: createrepo /home/ec2-user/repo/
#
#    - name: yumrepo config para el repo local
#      template:
#        src: local.repo
#        dest: /etc/yum.repos.d/local.repo
#
## instalar php 7.4, httpd, haproxy, varnish, mariadb
#    - name: instalar cosas
##      shell: yum --nogpgcheck -y install httpd php74-php php74-php-cli php74-php-fpm haproxy varnish
#      shell: yum --nogpgcheck -y install httpd php php-cli php-fpm php-oci8 haproxy varnish
#   
#    - name: install apps
#      yum:
#        name: "{{ item }}"
#        state: present
#      with_items:
#        - mariadb-server
#        - mariadb
#        - httpd
##        - php-symfony
##        - php-composer-installers
#
## crear el directorio /symfony, del usuario ec2-user
#    - name: directorio de symfony
#      file:
#        path: /symfony
#        state: directory
#        owner: "{{ ami_user }}"
#
#    - name: start sql server
#      service:
#        name: "{{ item }}"
#        state: restarted
#      with_items:
#        - mariadb
#
## crear base de datos
#    - name: crear la base de datos
#      command: mysql -e "CREATE DATABASE IF NOT EXISTS symfony"
#
#    - name: crear usuario de la base de datos
#      command: mysql -e "GRANT ALL ON symfony.* to 'usuario'@'localhost' identified by '123456'"
#
## borrar /etc/httpd/conf.d/userdir.conf, welcome.conf
#    - name: limpieza de httpd conf
#      file:
#        path: "/etc/httpd/conf.d/{{ item }}"
#        state: absent
#      with_items:
#        - userdir.conf
#        - welcome.conf
#
## compiar /etc/httpd/conf.d/demo.conf
#    - name: copiar demo.conf
#      template:
#        src: demo.conf
#        dest: /etc/httpd/conf.d/demo.conf
#
#    - name: configuracion de haproxy
#      template:
#        src: haproxy.cfg
#        dest: /etc/haproxy/haproxy.cfg
#
#    - name: configuracion de los logs de haproxy
#      template:
#        src: log_haproxy.conf
#        dest: /etc/rsyslog.d/haproxy.conf
#
#    - name: configuracion de varnish
#      template:
#        src: varnish.params
#        dest: /etc/varnish/varnish.params
#
#    - name: configuracion de varnish vcl
#      template:
#        src: default.vcl
#        dest: /etc/varnish/default.vcl
#
#    - name: test file 
#      template:
#        src: index.php
#        dest: /symfony/index.php
#        owner: apache
#      
### cd /symfony/
### composer create-project symfony/symfony-demo my_project
##    - name: composer create project
##      composer:
##        command: create-project
##        arguments: symfony/symfony-demo my_project
##        working_dir: /symfony
##        prefer_dist: yes
##      become: no
#
#    - name: start all servers
#      service:
#        name: "{{ item }}"
#        state: restarted
#      with_items:
#        - varnish
#        - httpd
#        - haproxy
#        - varnishncsa
#        - rsyslog
#
#    - name: salida de test
#      debug:
#        msg: " ENLACE DE PRUEBAS http://{{ inventory_hostname }}:8443/index.php"
#
